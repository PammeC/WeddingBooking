name: Docker CI/CD for Delete Photography Service

on:
  push:
    paths:
      - 'photography-service/delete-photography/**'
    branches: ["test3"]
  pull_request:
    paths:
      - 'photography-service/delete-photography/**'
    branches: ["main"]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: temurin

      - name: Build with Maven
        run: mvn clean package -DskipTests -f ./photography-service/delete-photography/pom.xml

      - name: Rename JAR file
        run: |
          mv ./photography-service/delete-photography/target/photography-service-0.0.1.jar \
             ./photography-service/delete-photography/delete-photography-service.jar

  dockerize-and-deploy:
    needs: build-and-test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/delete-photography-service:latest ./photography-service/delete-photography
          docker push ${{ secrets.DOCKER_USERNAME }}/delete-photography-service:latest

      - name: Deploy to EC2 (Amazon Linux 2023)
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.EC2_HOST_PHOTOGRAPHY }}
          username: ${{ secrets.EC2_USER_L }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            set -e  # Detener la ejecuciÃ³n en caso de errores
            echo "ðŸ”¹ Verificando e instalando Docker en Amazon Linux 2023..."

            # Instalar Docker en Amazon Linux 2023 si no estÃ¡ instalado
            if ! command -v docker &> /dev/null; then
              echo "==> Installing Docker"
              sudo dnf update -y
              sudo dnf install -y docker
              sudo systemctl enable docker
              sudo systemctl start docker
              sudo usermod -aG docker ec2-user
            fi

            # Configurar permisos para que ec2-user pueda ejecutar Docker sin sudo
            if ! groups | grep -q "\bdocker\b"; then
              echo "==> Agregando ec2-user al grupo docker"
              sudo usermod -aG docker ec2-user
              newgrp docker
            fi

            echo "ðŸ”¹ Deteniendo y eliminando cualquier contenedor en ejecuciÃ³n..."
            docker stop delete-photography-service || true
            docker rm delete-photography-service || true

            echo "ðŸ”¹ Eliminando imagen antigua..."
            docker rmi ${{ secrets.DOCKER_USERNAME }}/delete-photography-service:latest || true

            echo "ðŸ”¹ Descargando nueva imagen desde Docker Hub..."
            docker pull ${{ secrets.DOCKER_USERNAME }}/delete-photography-service:latest

            echo "ðŸ”¹ Iniciando nuevo contenedor..."
            nohup docker run -d \
              --name delete-photography-service \
              -p 8054:8054 \
              -e SERVER_PORT=${{ secrets.SERVER_PORT_DELETE_PHOTOGRAPHY }} \
              -e SPRING_DATASOURCE_URL=${{ secrets.SPRING_DATASOURCE_URL_PHOTOGRAPHY }} \
              -e SPRING_DATASOURCE_USERNAME=${{ secrets.SPRING_DATASOURCE_USERNAME_P }} \
              -e SPRING_DATASOURCE_PASSWORD=${{ secrets.SPRING_DATASOURCE_PASSWORD }} \
              --restart=always \
              ${{ secrets.DOCKER_USERNAME }}/delete-photography-service:latest > docker.log 2>&1 &

            echo "âœ… Despliegue completado en Amazon Linux 2023!"
