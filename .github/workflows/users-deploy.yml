name: Deploy User Microservices to EC2

on:
  push:
    branches:
      - testm

jobs:
  deploy:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: ["user-registration", "get-user", "delete-user", "update-user", "login"]
        instance: [1, 2, 3, 4, 5] # Corresponde a cada instancia EC2

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up SSH
        uses: shimataro/ssh-deploy-action@v2
        with:
          host: ${{ secrets["EC2_IP_instance" + matrix.instance] }} # Corrección aquí
          username: ${{ secrets.EC2_USER }} # Usuario EC2 (secreto de GitHub)
          key: ${{ secrets.EC2_PRIVATE_KEY }} # Clave privada EC2 (secreto de GitHub)
          remote_dir: /home/${{ secrets.EC2_USER }}/user-microservices-${{ matrix.service }} # Directorio en EC2
          allow_empty_commit: true

      - name: Install Docker (if needed)
        run: |
          if ! [ -x "$(command -v docker)" ]; then
            sudo apt-get update
            sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
            sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
            sudo apt-get update
            sudo apt-get install -y docker-ce
            sudo usermod -aG docker ${{ secrets.EC2_USER }}
          fi

      - name: Pull Docker image
        run: sudo docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/${{ matrix.service }}-service:latest

      - name: Run Docker container
        run: |
          sudo docker stop $(sudo docker ps -q --filter name=user-${{ matrix.service }}-service) || true
          sudo docker rm $(sudo docker ps -aq --filter name=user-${{ matrix.service }}-service) || true
          sudo docker run -d --name user-${{ matrix.service }}-service -p ${{ matrix.service }}-port:${{ matrix.service }}-port ${{ secrets.DOCKER_HUB_USERNAME }}/${{ matrix.service }}-service:latest

      - name: Docker image prune
        run: sudo docker image prune -af