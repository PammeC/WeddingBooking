name: Docker Compose CI/CD for Get User Service

on:
  push:
    paths:
      - 'Users/get-user-service/**'
    branches: ["testm"]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
      
      - name: Install Dependencies
        run: npm install
        working-directory: ./Users/get-user-service
      
      - name: Verify Installation
        run: |
          npm list
          ls -la
        working-directory: ./Users/get-user-service

  dockerize-and-deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Build Docker Image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/get-user-service-1:latest ./Users/get-user-service
      
      - name: Push Docker Image to Docker Hub
        run: docker push ${{ secrets.DOCKER_USERNAME }}/get-user-service-1:latest
      
      - name: Deploy with SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST_GET_USER }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            # Crear directorio si no existe
            mkdir -p ~/get-user-service
            cd ~/get-user-service
            
            # Crear archivo docker-compose.yml
            cat > docker-compose.yml <<EOL
            version: '3.8'
            services:
              get-user:
                image: ${{ secrets.DOCKER_USERNAME }}/get-user-service-1:latest
                container_name: get-user-service-1
                environment:
                  PORT: ${{ secrets.PORT3001 }}
                  DB_HOST: ${{ secrets.DB_HOST }}
                  DB_USER: ${{ secrets.DB_USER }}
                  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
                  DB_NAME: ${{ secrets.DB_NAME }}
                  DB_PORT: ${{ secrets.DB_PORT }}
                ports:
                  - "3001:3001"
                networks:
                  - user-network
            networks:
              user-network:
                driver: bridge
            EOL
            
            # Detener y eliminar contenedores existentes
            docker-compose down || true
            docker rm -f get-user-service-1 || true
            
            # Iniciar servicios
            docker-compose up -d
            
            # Verificar estado
            docker-compose ps